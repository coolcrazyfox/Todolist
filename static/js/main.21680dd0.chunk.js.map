{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","TaskRedux.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","initialState","removeTaskAC","taskId","todolistId","type","changeTaskStatusAC","isDone","changeTaskTitleAC","TaskRedux","task","useSelector","state","tasks","filter","id","dispatch","useDispatch","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","onTitleChangeHandler","newValue","key","className","Checkbox","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","map","style","paddingTop","Button","AppWithRedux","v1","todolists","removeTask","action","addTaskAC","changeStatus","changeTaskTitle","newTitle","changeTodolistTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","changeTaskStatus","rootReducer","combineReducers","stateCopy","newTasks","newTask","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.21680dd0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const  AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        error && setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n           return {...state, [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId ? {...task, isDone: action.isDone}: task)}\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId ? {...task, title: action.title}: task)}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {TaskType} from \"./Todolist\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport const TaskRedux = React.memo(({\r\n                                    todolistId,\r\n                                    taskId\r\n}:TaskPropsType) => {\r\n\r\n   const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todolistId]\r\n       .filter(task => task.id === taskId)[0])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = useCallback(() => dispatch(removeTaskAC(taskId, todolistId)), [taskId, todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        dispatch(changeTaskStatusAC(taskId, newIsDoneValue, todolistId));\r\n    }, [taskId, todolistId])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newValue, todolistId));\r\n    }, [taskId, todolistId])\r\n\r\n\r\n    return <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\nimport {TaskRedux} from \"./TaskRedux\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    }, [props.removeTodolist, props.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.id, props.changeFilter]);\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n\r\n                    return <TaskRedux\r\n                        key={t.id}\r\n                        todolistId={props.id}\r\n                        taskId={t.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import React, {useCallback, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}